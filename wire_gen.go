// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fmt"
	"github.com/ATenderholt/lambda-router/internal/docker"
	"github.com/ATenderholt/lambda-router/internal/domain"
	"github.com/ATenderholt/lambda-router/internal/http"
	"github.com/ATenderholt/lambda-router/internal/repo"
	"github.com/ATenderholt/lambda-router/pkg/database"
	"github.com/ATenderholt/lambda-router/settings"
	"github.com/go-chi/chi/v5"
	"github.com/google/wire"
	http2 "net/http"
)

import (
	_ "github.com/mattn/go-sqlite3"
)

// Injectors from inject.go:

func InjectApp(cfg *settings.Config) (App, error) {
	database := RealDatabase(cfg)
	layerRepository := repo.NewLayerRepository(database)
	runtimeRepository := repo.NewRuntimeRepository(database)
	layerHandler := http.NewLayerHandler(cfg, layerRepository, runtimeRepository)
	functionRepository := repo.NewFunctionRepository(database)
	functionHandler := http.NewFunctionHandler(cfg, functionRepository, layerRepository, runtimeRepository)
	manager, err := docker.NewManager(cfg)
	if err != nil {
		return App{}, err
	}
	mux := http.NewChiMux(layerHandler, functionHandler, manager)
	app := NewApp(cfg, mux, manager)
	return app, nil
}

// inject.go:

func NewApp(cfg *settings.Config, mux *chi.Mux, docker2 *docker.Manager) App {
	srv := &http2.Server{
		Addr:    fmt.Sprintf(":%d", cfg.BasePort),
		Handler: mux,
	}

	return App{
		port:   cfg.BasePort,
		srv:    srv,
		docker: docker2,
	}
}

func RealDatabase(cfg *settings.Config) database.Database {
	return database.RealDatabase{
		Wrapped: cfg.CreateDatabase(),
	}
}

var db = wire.NewSet(
	RealDatabase, repo.NewFunctionRepository, repo.NewLayerRepository, repo.NewRuntimeRepository, wire.Bind(new(domain.FunctionRepository), new(*repo.FunctionRepository)), wire.Bind(new(domain.LayerRepository), new(*repo.LayerRepository)), wire.Bind(new(domain.RuntimeRepository), new(*repo.RuntimeRepository)),
)

var api = wire.NewSet(http.NewFunctionHandler, http.NewLayerHandler, http.NewChiMux)
